---
# tasks file for build
- name: Filter and return only selected facts
  ansible.builtin.setup:
    filter:
      - ansible_distribution
      - ansible_distribution_major_version

- name: Validation for distribution
  ansible.builtin.assert:
    that:
      - "'{{ ansible_distribution }}' in ['Ubuntu', 'Amazon', 'AlmaLinux', 'RedHat', 'CentOS']"

- name: Validation for Ubuntu major version
  when: ansible_distribution == 'Ubuntu'
  ansible.builtin.assert:
    that:
      - "'{{ ansible_distribution_major_version }}' in ['22']"

- name: Validation for AmazonLinux major version
  when: ansible_distribution == 'Amazon'
  ansible.builtin.assert:
    that:
      - "'{{ ansible_distribution_major_version }}' in ['2023']"

- name: Validation for AlmaLinux major version
  when: ansible_distribution == 'AlmaLinux'
  ansible.builtin.assert:
    that:
      - "'{{ ansible_distribution_major_version }}' in ['9']"

- name: Validation for RedHat major version
  when: ansible_distribution == 'RedHat'
  ansible.builtin.assert:
    that:
      - "'{{ ansible_distribution_major_version }}' in ['8', '9']"

- name: Validation for CentOS major version
  when: ansible_distribution == 'CentOS'
  ansible.builtin.assert:
    that:
      - "'{{ ansible_distribution_major_version }}' in ['7']"

- name: Install package for DPKG
  when: ansible_distribution in ['Ubuntu']
  ansible.builtin.apt:
    name: "{{ service_name }}"
    state: present

- name: Install package for RPM (dnf)
  when: ansible_distribution in ['Amazon', 'AlmaLinux', 'RedHat']
  ansible.builtin.dnf:
    name: "{{ service_name }}"
    state: present

- name: Install package for RPM (yum)
  when: ansible_distribution in ['CentOS']
  ansible.builtin.yum:
    name: "{{ service_name }}"
    state: present

- name: Set systemd
  when: service_state is defined and service_enabled is defined
  ansible.builtin.systemd_service:
    name: "{{ service_name }}"
    state: "{{ service_state }}"
    enabled: "{{ service_enabled }}"

- name: Copy conf file
  when: service_copy_conf is defined
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    backup: "{{ item.backup | default(omit) }}"
    owner: "{{ item.owner | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    mode: "{{ item.mode | default(omit) }}"
  loop: "{{ service_copy_conf }}"
  notify: Handler service state

- name: Template conf file out to a target host
  when: service_template_conf is defined
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    backup: "{{ item.backup | default(omit) }}"
    owner: "{{ item.owner | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    mode: "{{ item.mode | default(omit) }}"
  loop: "{{ service_template_conf }}"
  notify: Handler service state

- name: Linefile conf file
  when: service_lineinfile_conf is defined
  ansible.builtin.lineinfile:
    path: "{{ item.path }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    insertafter: "{{ item.insertafter | default(omit) }}"
    insertbefore: "{{ item.insertbefore | default(omit) }}"
    backup: "{{ item.backup | default(omit) }}"
    owner: "{{ item.owner | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    mode: "{{ item.mode | default(omit) }}"
  loop: "{{ service_lineinfile_conf }}"
  notify: Handler service state
